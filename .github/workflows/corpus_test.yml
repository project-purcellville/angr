name: Corpus Test

on:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main
  workflow_dispatch:

jobs:
  fetch_binaries_metadata:
    runs-on: ubuntu-latest
    # Expose step output as job output
    outputs:
      chunks: ${{ steps.fetch_binaries.outputs.chunks }}

    steps:
      - name: Checkout current repository
        uses: actions/checkout@v2

      - name: Fetch binaries metadata
        id: fetch_binaries
        env:
          GITHUB_TOKEN: ${{ secrets.CORPUS_ACCESS_TOKEN }}
        run: |
          # Fetch the list of binaries from the binaries repository using the GitHub API
          fetch_files_from_tree() {
              local sha=$1
              local prefix=$2
              local response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                  "https://api.github.com/repos/${{ vars.CORPUS_GITHUB_OWNER }}/${{ vars.CORPUS_GITHUB_REPO }}/git/trees/${sha}?recursive=1")
              
              echo "$response" | jq -r --arg prefix "$prefix" '.tree[] | select(.type == "blob") | $prefix + "/" + .path'
          }
          # Initial path to start fetching files
          initial_path="${{ vars.CORPUS_GITHUB_PATH }}"
          # Fetch the top-level SHAs and paths
          top_level_response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ vars.CORPUS_GITHUB_OWNER }}/${{ vars.CORPUS_GITHUB_REPO }}/contents/${initial_path}?ref=main")
          # Collect all SHAs and their corresponding paths
          sha_path_pairs=$(echo "$top_level_response" | jq -r '.[] | select(.type == "dir") | .sha + " " + .path')
          top_level_files=$(echo "$top_level_response" | jq -r '.[] | select(.type == "file") | .path')
          # Fetch files for each SHA and combine the results
          all_files=($top_level_files)
          while IFS= read -r sha_path; do
              sha=$(echo "$sha_path" | awk '{print $1}')
              path=$(echo "$sha_path" | awk '{print $2}')
              files=$(fetch_files_from_tree $sha $path)
              all_files+=($files)
          done <<< "$sha_path_pairs"
          # Convert array to space-separated string
          all_files="${all_files[@]}"
          # Count the number of files
          files_count=$(echo "$all_files" | wc -w)
          echo "Total number of files: $files_count"
          # Calculate the number of files each job should handle (max 256 jobs)
          MAX_MATRIX_JOBS=256
          CHUNK_SUFFIX_LENGTH=${#MAX_MATRIX_JOBS}
          segment_size=$((($files_count + $((MAX_MATRIX_JOBS - 1))) / MAX_MATRIX_JOBS))
          echo "Segment size (number of files per job): $segment_size"
          # Split the files list into chunks
          echo "$all_files" | tr ' ' '\n' | split -l $segment_size -d -a $CHUNK_SUFFIX_LENGTH - "files_chunk_"
          # Set environment variables for each chunk
          chunks=()
          chunk_count=0
          for file in files_chunk_*; do
              chunk_index=$(printf "%0${CHUNK_SUFFIX_LENGTH}d" $chunk_count)
              files_chunk=$(cat $file | tr '\n' ',')
              echo "FILES_$chunk_count=$files_chunk" >> $GITHUB_ENV
              chunks+=($chunk_index)
              chunk_count=$((chunk_count + 1))
          done
          # Output the chunks in JSON format
          echo "chunks=$(printf '%s\n' "${chunks[@]}" | jq -R -s -c 'split("\n")[:-1]')" >> "$GITHUB_OUTPUT"
  analyze_binaries:
    needs: fetch_binaries_metadata
    runs-on: ubuntu-latest

    strategy:
      matrix:
        chunk: ${{ fromJson(needs.fetch_binaries_metadata.outputs.chunks) }}

    steps:
      - name: Checkout current repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-insta
          # Setup and install angr to this context
          pip install .
      - name: Fetch binary files and run analysis
        env:
          GITHUB_TOKEN: ${{ secrets.CORPUS_ACCESS_TOKEN }}
        run: |
          # Determine the environment variable name for the current chunk
          files_var="FILES_${{ matrix.chunk }}"
          files=${!files_var}
          # Convert the comma-separated list of binaries into an array
          IFS=',' read -ra files_array <<< "$files"
          # Set the context to the corpus_test folder for running pytest
          cd corpus_tests
          # TODO: figure out where to pull in the old snapshots for each binary for comparison
          for file in "${file_array[@]}"; do
            if [[ -n "$file" ]]; then
              echo "Processing binary: $file"
              # Create the directory to place the downloaded files
              mkdir -p binaries/$(dirname $file)
            
              # Fetch the binary file from the binaries repository
              curl -s -H "Authorization: token $GITHUB_TOKEN" \
                -o binaries/$file \
                  "https://raw.githubusercontent.com/${{ vars.CORPUS_GITHUB_OWNER }}/${{ vars.CORPUS_GITHUB_REPO }}/main/$file"
                
              # Run Angr Analysis on the binary file
              pytest --insta update-new --binary binaries/$binary
            fi
          done
      - name: Upload decompilation results
        uses: actions/upload-artifact@v2
        with:
          name: decompilation-results
          path: insta_snapshots
